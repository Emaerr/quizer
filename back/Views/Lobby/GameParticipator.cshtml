@model Quizer.Models.Quizzes.QuestionViewModel
@{
    ViewData["Title"] = "Game";
}

<h4>GameParticipator</h4>

<!-- Отображение текста вопроса -->
<div class="question-container">
    <h2>@Model.Title</h2>
</div>

<!-- Счётчик времени -->
<div id="timer">Оставшееся время: <span id="time-left">30</span> секунд</div>

<!-- Отображение ответов в виде кнопок -->
<div class="answers-container">
    @for (int i = 0; i < 4 && i < Model.Answers.Count; i++)
    {
        <button class="answer-button" data-answer="@Model.Answers[i].Guid">
            @Model.Answers[i].Title
        </button>
    }
</div>

<!-- Скрытое поле для отслеживания выбранного ответа -->
<input type="hidden" id="selectedAnswer" name="selectedAnswer" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>

<script>
    // Таймер
    let timeLeft = @ViewData["timeLimit"] / 1000;
    const timerElement = document.getElementById("time-left");

    const countdown = setInterval(() => {
        timeLeft--;
        timerElement.innerText = timeLeft;

        if (timeLeft <= 0) {
            clearInterval(countdown);
        }
    }, 1000);

    // Обработчик выбора ответа
    const answerButtons = document.querySelectorAll(".answer-button");
    answerButtons.forEach(button => {
        button.addEventListener("click", (e) => {
            // Снятие выделения со всех кнопок
            answerButtons.forEach(btn => btn.classList.remove("selected"));
            // Выделение нажатой кнопки
            e.currentTarget.classList.add("selected");
            // Запись выбранного ответа
            document.getElementById("selectedAnswer").value = e.currentTarget.getAttribute("data-answer");
        });
    });

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/LobbyHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    connection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();

    connection.on("RedirectToQuestion", (user, message) => {
        console.log("RedirectToQuestion");
        window.location.href = '/Lobby/Game/@ViewData["lobbyGuid"]';
        window.location.reload();
    });

    // connection.on("RedirectToBreak", (user, message) => {
    //     window.location.href = '/Lobby/Result/@ViewData["lobbyGuid"]';
    // });

    connection.on("RedirectToResult", (user, message) => {
       window.location.href = '/Lobby/Result/@ViewData["lobbyGuid"]';
    });
    connection.on("SendAnswer", (user, message) => {
        console.log("SendAnswer")
        let selectedAnswerGuid = document.getElementById("selectedAnswer").value
        fetch(`/Lobby/RegisterAnswer/@ViewData["lobbyGuid"]?answerGuid=${selectedAnswerGuid}`, {
            method: "POST"
        })
            .then(response => {
                if (response.ok) {
                    alert("Answer registered successfully.")
                } else if (response.status === 401) {
                    alert("Unauthorized: Please log in.");
                } else if (response.status === 403) {
                    alert("Forbidden: Only the lobby master can start the quiz.");
                } else if (response.status === 404) {
                    alert("Lobby not found.");
                } else {
                    alert("An error occurred while sending the answer.");
                }
            })
            .catch(error => {
                console.error("Error starting quiz:", error);
            });
    });
</script>

<style>
    .question-container {
        margin-bottom: 15px;
    }

    .answers-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 15px;
    }

    .answer-button {
        padding: 10px;
        font-size: 16px;
    }

        .answer-button.selected {
            background-color: #007bff;
            color: white;
        }

    #timer {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 15px;
    }
</style>
